name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
    
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --with dev
    
    - name: Run linting
      run: |
        poetry run black --check backend tests
        poetry run isort --check-only backend tests
        poetry run flake8 backend tests
    
    - name: Run type checking
      run: poetry run mypy backend
      continue-on-error: true  # Type checking can be strict initially
    
    - name: Run tests
      run: poetry run pytest --cov=backend --cov-report=xml
      env:
        OPENAI_API_KEY: fake_key_for_testing
        PINECONE_API_KEY: fake_key_for_testing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.10'
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  frontend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'backend/static/package-lock.json'
    
    - name: Install dependencies
      run: |
        cd backend/static
        npm ci
    
    - name: Run prettier check
      run: |
        cd backend/static
        npm run format-check
    
    - name: Run ESLint
      run: |
        cd backend/static
        npm run lint